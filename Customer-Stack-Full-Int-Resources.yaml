Parameters:
  #=======================================================
  #
  #                   CloudFormation Parameters
  #
  #=======================================================
  StackName:
    Type: String
    Default: ''
    Description: Unique identifier of the resources in this stack
  Codebase:
    Type: String
    Default: customer_stack.zip
    AllowedValues:
      - customer_stack.zip
    NoEcho: true
    Description: >-
      Zip file which contains the codebase needed for the deployment of the
      stack
  1nceAWSId:
    Type: String
    Default: ''
    Description: 1NCE AWS Account Id
  CodebaseVersion:
    Type: String
    Default: ''
    Description: Code base version
  CodebaseBucket:
    Type: String
    Default: ''
    Description: Code base bucket
  PostbackCreateSnsArn:
    Type: String
    Default: ''
    Description: Postback Create SNS Arn
  PostbackDeleteSnsArn:
    Type: String
    Default: ''
    Description: Postback Delete SNS Arn
  PostbackRegistrationQueueUrl:
    Type: String
    Default: ''
    Description: Postback Registration SQS Queue Url
  PostbackDeregistrationQueueUrl:
    Type: String
    Default: ''
    Description: Postback Deregistration SQS Queue Url
Resources:
  #=======================================================
  #
  #                     Log groups
  #
  #=======================================================
  ProvisionThingLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${StackName}-ProvisionThing'
  RemoveThingLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${StackName}-RemoveThing'
  AttachCertToThingLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${StackName}-AttachCertToThing'
  DescribeThingLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${StackName}-DescribeThing'
  CreateThingLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${StackName}-CreateThing'
  CreateKeysAndCertLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${StackName}-CreateKeysAndCert'
  DisableCertLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${StackName}-DisableCert'
  DeleteCertLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${StackName}-DeleteCert'
  DeleteThingLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${StackName}-DeleteThing'
  AttachPolicyToCertLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${StackName}-AttachPolicyToCert'
  UpdateThingLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${StackName}-UpdateThing'
  DetachPolicyFromCertLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${StackName}-DetachPolicyFromCert'
  DetachCertFromThingLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${StackName}-DetachCertFromThing'
  DeletePolicyLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${StackName}-DeletePolicy'
  PostBackCertificateLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${StackName}-PostBackCertificate'
  SendToErrorQueueLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${StackName}-SendToErrorQueue'
  SendErrorToSnsTopicLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${StackName}-SendErrorToSnsTopic'
  GetCertificateFromDeviceLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${StackName}-GetCertificateFromDevice'
  BridgeMqttToIoTCoreLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${StackName}-BridgeMqttToIoTCore'
  DownloadCodeLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${StackName}-DownloadLambdaCode'
  GetIotCoreEndpointLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${StackName}-GetIotCoreEndpoint'
  CleanUpCertificatesLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${StackName}-CleanUpCertificates'
  #=======================================================
  #
  #                     Lambda IAM Role
  #
  #=======================================================
  LambdaExecutionIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Join
            - '-'
            - - iot-core
              - lambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*
              - Effect: Allow
                Action:
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*:*
              - Effect: Allow
                Action:
                  - 'xray:PutTraceSegments'
                  - 'xray:PutTelemetryRecords'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iot:AcceptCertificateTransfer'
                  - 'iot:AttachPolicy'
                  - 'iot:AttachThingPrincipal'
                  - 'iot:AttachPrincipalPolicy'
                  - 'iot:CreateKeysAndCertificate'
                  - 'iot:CreateThing'
                  - 'iot:DeleteCertificate'
                  - 'iot:DeleteThing'
                  - 'iot:DetachPolicy'
                  - 'iot:DescribeThing'
                  - 'iot:UpdateCertificate'
                  - 'iot:DetachThingPrincipal'
                  - 'iot:UpdateThing'
                  - 'iot:describeEndpoint'
                  - 'iot:Publish'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'states:StartExecution'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:DeleteObject'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:PutObject'
                  - 's3:GetBucketPolicy'
                  - 'S3:PutObjectTagging'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref CertBucketS3
                      - /*
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref CertBucketS3
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref CodeBucketS3
                      - /*
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref CodeBucketS3
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 'S3:GetObjectTagging'
                  - 's3:ListBucket'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref CodebaseBucket
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref CodebaseBucket
                      - /
                      - !Ref CodebaseVersion
                      - /*
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:SendMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                Resource:
                  - !GetAtt
                    - CreateQueueSQS
                    - Arn
                  - !GetAtt
                    - DeleteQueueSQS
                    - Arn
              - Effect: Allow
                Action:
                  - 'apigateway:GET'
                Resource: '*'

      Path: /
  #=======================================================
  #
  #             Step Function IAM Role
  #
  #=======================================================
  StateMachineExecutionIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub 'states.${AWS::Region}.amazonaws.com'
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'sqs:SendMessage'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource: '*'
  #=======================================================
  #
  #             1nce cross-account IAM Role
  #
  #=======================================================
  1nceCrossAccountIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Ref 1nceAWSId
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: Cross-Account-Role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:SendMessage'
                Resource: 
                  - !GetAtt
                    - CreateQueueSQS
                    - Arn
                  - !GetAtt
                    - DeleteQueueSQS
                    - Arn
              - Effect: Allow
                Action:
                  - 'iot:Publish'
                Resource: '*'
  #=======================================================
  #
  #                     SQS Permissions
  #
  #=======================================================
  ProvisionThingLambdaFunctionSqsPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref ProvisionThingLambdaFunction
      SourceArn: !GetAtt
        - CreateQueueSQS
        - Arn
      Principal: sqs.amazonaws.com
  RemoveThingLambdaFunctionSqsPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref RemoveThingLambdaFunction
      SourceArn: !GetAtt
        - DeleteQueueSQS
        - Arn
      Principal: sqs.amazonaws.com
  #=======================================================
  #
  #                     S3 Buckets
  #
  #=======================================================
  CertBucketS3:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  CodeBucketS3:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  #=======================================================
  #
  #                      SQS Queues
  #
  #=======================================================
  CreateQueueSQS:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: !Sub '${StackName}-CreateQueue'
  DeleteQueueSQS:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: !Sub '${StackName}-DeleteQueue'
  #=======================================================
  #
  #                 SQS queue Resource Policy
  #
  #=======================================================
  QueueAccessPolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Id: QueueAccessPolicy
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Ref 1nceAWSId
            Action:
              - 'sqs:SendMessage'
            Resource: !GetAtt
              - CreateQueueSQS
              - Arn
          - Effect: Allow
            Principal:
              AWS:
                - !Ref 1nceAWSId
            Action:
              - 'sqs:SendMessage'
            Resource: !GetAtt
              - DeleteQueueSQS
              - Arn
      Queues:
        - !Ref CreateQueueSQS
        - !Ref DeleteQueueSQS
  #=======================================================
  #
  #                 Lambda Event Mappings
  #
  #=======================================================
  LambdaFunctionActivateEventSourceMapping:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt
        - CreateQueueSQS
        - Arn
      FunctionName: !GetAtt
        - ProvisionThingLambdaFunction
        - Arn
  LambdaFunctionDeactivateEventSourceMapping:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt
        - DeleteQueueSQS
        - Arn
      FunctionName: !GetAtt
        - RemoveThingLambdaFunction
        - Arn
  #=======================================================
  #
  #                 Step Function Initiators
  #
  #=======================================================
  ProvisionThingLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref CodeBucketS3
        S3Key: !Join
          - ''
          - - !Ref CodebaseVersion
            - /
            - !Ref Codebase
      FunctionName: !Sub '${StackName}-ProvisionThing'
      Handler: src/step_functions/provisionThing.provisionThing
      MemorySize: 256
      Role: !GetAtt
        - LambdaExecutionIamRole
        - Arn
      Runtime: nodejs12.x
      Timeout: 6
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref CreateDeviceStepFunction
      TracingConfig:
        Mode: Active
    DependsOn:
      - ProvisionThingLogGroup
      - CodeDownloadService
  RemoveThingLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref CodeBucketS3
        S3Key: !Join
          - ''
          - - !Ref CodebaseVersion
            - /
            - !Ref Codebase
      FunctionName: !Sub '${StackName}-RemoveThing'
      Handler: src/step_functions/removeThing.removeThing
      MemorySize: 256
      Role: !GetAtt
        - LambdaExecutionIamRole
        - Arn
      Runtime: nodejs12.x
      Timeout: 6
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref RemoveDeviceStepFunction
      TracingConfig:
        Mode: Active
    DependsOn:
      - RemoveThingLogGroup
      - CodeDownloadService
  #=======================================================
  #
  #               Provision Step Function Lambdas
  #
  #=======================================================
  AttachCertToThingLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref CodeBucketS3
        S3Key: !Join
          - ''
          - - !Ref CodebaseVersion
            - /
            - !Ref Codebase
      FunctionName: !Sub '${StackName}-AttachCertToThing'
      Handler: src/step_functions/create/attachCertToThing.attachCertToThing
      MemorySize: 256
      Role: !GetAtt
        - LambdaExecutionIamRole
        - Arn
      Runtime: nodejs12.x
      Timeout: 6
      TracingConfig:
        Mode: Active
    DependsOn:
      - AttachCertToThingLogGroup
      - CodeDownloadService
  CreateThingLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref CodeBucketS3
        S3Key: !Join
          - ''
          - - !Ref CodebaseVersion
            - /
            - !Ref Codebase
      FunctionName: !Sub '${StackName}-CreateThing'
      Handler: src/step_functions/create/createThing.createThing
      MemorySize: 256
      Role: !GetAtt
        - LambdaExecutionIamRole
        - Arn
      Runtime: nodejs12.x
      Timeout: 6
      TracingConfig:
        Mode: Active
    DependsOn:
      - CreateThingLogGroup
      - CodeDownloadService
  CreateKeysAndCertLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref CodeBucketS3
        S3Key: !Join
          - ''
          - - !Ref CodebaseVersion
            - /
            - !Ref Codebase
      FunctionName: !Sub '${StackName}-CreateKeysAndCert'
      Handler: src/step_functions/create/createKeysAndCert.createKeysAndCert
      MemorySize: 256
      Role: !GetAtt
        - LambdaExecutionIamRole
        - Arn
      Runtime: nodejs12.x
      Timeout: 6
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          S3_BUCKET: !Ref CertBucketS3
    DependsOn:
      - CreateKeysAndCertLogGroup
      - CodeDownloadService
  AttachPolicyToCertLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref CodeBucketS3
        S3Key: !Join
          - ''
          - - !Ref CodebaseVersion
            - /
            - !Ref Codebase
      FunctionName: !Sub '${StackName}-AttachPolicyToCert'
      Handler: src/step_functions/create/attachPolicyToCert.attachPolicyToCert
      MemorySize: 256
      Role: !GetAtt
        - LambdaExecutionIamRole
        - Arn
      Runtime: nodejs12.x
      Timeout: 6
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          THING_POLICY_NAME: !Ref ThingPolicy
    DependsOn:
      - AttachPolicyToCertLogGroup
      - CodeDownloadService
  UpdateThingLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref CodeBucketS3
        S3Key: !Join
          - ''
          - - !Ref CodebaseVersion
            - /
            - !Ref Codebase
      FunctionName: !Sub '${StackName}-UpdateThing'
      Handler: src/step_functions/create/updateThing.updateThing
      MemorySize: 256
      Role: !GetAtt
        - LambdaExecutionIamRole
        - Arn
      Runtime: nodejs12.x
      Timeout: 6
      TracingConfig:
        Mode: Active
    DependsOn:
      - UpdateThingLogGroup
      - CodeDownloadService
  #=======================================================
  #
  #               Deprovision Step Function Lambdas
  #
  #=======================================================
  RemoveCertLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref CodeBucketS3
        S3Key: !Join
          - ''
          - - !Ref CodebaseVersion
            - /
            - !Ref Codebase
      FunctionName: !Sub '${StackName}-RemoveCert'
      Handler: src/step_functions/remove/removeCertificate.deleteCertificateFromS3
      MemorySize: 256
      Role: !GetAtt
        - LambdaExecutionIamRole
        - Arn
      Runtime: nodejs12.x
      Timeout: 6
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          S3_BUCKET: !Ref CertBucketS3
    DependsOn:
      - DeleteCertLogGroup
      - CodeDownloadService
  DescribeThingLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref CodeBucketS3
        S3Key: !Join
          - ''
          - - !Ref CodebaseVersion
            - /
            - !Ref Codebase
      FunctionName: !Sub '${StackName}-DescribeThing'
      Handler: src/step_functions/remove/describeThing.describeThing
      MemorySize: 256
      Role: !GetAtt
        - LambdaExecutionIamRole
        - Arn
      Runtime: nodejs12.x
      Timeout: 6
      TracingConfig:
        Mode: Active
    DependsOn:
      - DescribeThingLogGroup
      - CodeDownloadService
  DisableCertLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref CodeBucketS3
        S3Key: !Join
          - ''
          - - !Ref CodebaseVersion
            - /
            - !Ref Codebase
      FunctionName: !Sub '${StackName}-DisableCert'
      Handler: src/step_functions/remove/disableCertificate.disableCertificate
      MemorySize: 256
      Role: !GetAtt
        - LambdaExecutionIamRole
        - Arn
      Runtime: nodejs12.x
      Timeout: 6
      TracingConfig:
        Mode: Active
    DependsOn:
      - DisableCertLogGroup
      - CodeDownloadService
  DeleteCertLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref CodeBucketS3
        S3Key: !Join
          - ''
          - - !Ref CodebaseVersion
            - /
            - !Ref Codebase
      FunctionName: !Sub '${StackName}-DeleteCert'
      Handler: src/step_functions/remove/deleteCertificate.deleteCertificate
      MemorySize: 256
      Role: !GetAtt
        - LambdaExecutionIamRole
        - Arn
      Runtime: nodejs12.x
      Timeout: 6
      TracingConfig:
        Mode: Active
    DependsOn:
      - DeleteCertLogGroup
      - CodeDownloadService
  DeleteThingLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref CodeBucketS3
        S3Key: !Join
          - ''
          - - !Ref CodebaseVersion
            - /
            - !Ref Codebase
      FunctionName: !Sub '${StackName}-DeleteThing'
      Handler: src/step_functions/remove/deleteThing.deleteThing
      MemorySize: 256
      Role: !GetAtt
        - LambdaExecutionIamRole
        - Arn
      Runtime: nodejs12.x
      Timeout: 6
      TracingConfig:
        Mode: Active
    DependsOn:
      - DeleteThingLogGroup
      - CodeDownloadService
  DetachPolicyFromCertLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref CodeBucketS3
        S3Key: !Join
          - ''
          - - !Ref CodebaseVersion
            - /
            - !Ref Codebase
      FunctionName: !Sub '${StackName}-DetachPolicyFromCert'
      Handler: >-
        src/step_functions/remove/detachPolicyFromCertificate.detachPolicyFromCertificate
      MemorySize: 256
      Role: !GetAtt
        - LambdaExecutionIamRole
        - Arn
      Runtime: nodejs12.x
      Timeout: 6
      Environment:
        Variables:
          THING_POLICY_NAME: !Ref ThingPolicy
      TracingConfig:
        Mode: Active
    DependsOn:
      - DetachPolicyFromCertLogGroup
      - CodeDownloadService
  DetachCertFromThingLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref CodeBucketS3
        S3Key: !Join
          - ''
          - - !Ref CodebaseVersion
            - /
            - !Ref Codebase
      FunctionName: !Sub '${StackName}-DetachCertFromThing'
      Handler: >-
        src/step_functions/remove/detachCertificateFromThing.detachCertificateFromThing
      MemorySize: 256
      Role: !GetAtt
        - LambdaExecutionIamRole
        - Arn
      Runtime: nodejs12.x
      Timeout: 6
      TracingConfig:
        Mode: Active
    DependsOn:
      - DetachCertFromThingLogGroup
      - CodeDownloadService
  #=======================================================
  #
  #                 1nce Code Download Service
  #
  #=======================================================
  DownloadCodeLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': o
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s'%dest_bucket)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=o)
          def delete_objects(bucket, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
      FunctionName: !Sub '${StackName}-DownloadCodeService'
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt
        - LambdaExecutionIamRole
        - Arn
      Runtime: python2.7
      Timeout: 240
      TracingConfig:
        Mode: Active
    DependsOn:
      - DownloadCodeLogGroup
  CodeDownloadService:
    Type: 'AWS::CloudFormation::CustomResource'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'DownloadCodeLambdaFunction.Arn'
      DestBucket: !Ref 'CodeBucketS3'
      SourceBucket: !Ref CodebaseBucket
      Objects:
        - !Join
          - ''
          - - !Ref CodebaseVersion
            - /
            - !Ref Codebase
  #=======================================================
  #
  #                 1nce Clean-up Cert bucket Service
  #
  #=======================================================
  CleanUpCertificatesLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def delete_objects(bucket):
              s3 = boto3.resource('s3')
              bucket = s3.Bucket(bucket)
              bucket.objects.all().delete()
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  bucket = event['ResourceProperties']['Bucket']
                  if event['RequestType'] == 'Delete':
                      delete_objects(bucket)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
      FunctionName: !Sub '${StackName}-CleanUpCertificates'
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt
        - LambdaExecutionIamRole
        - Arn
      Runtime: python2.7
      Timeout: 360
      TracingConfig:
        Mode: Active
    DependsOn:
      - CleanUpCertificatesLogGroup
  CleanUpCertificatesService:
    Type: 'AWS::CloudFormation::CustomResource'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'CleanUpCertificatesLambdaFunction.Arn'
      Bucket: !Ref 'CertBucketS3'
  #=======================================================
  #
  #                 Step Functions
  #
  #=======================================================
  CreateDeviceStepFunction:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: !Sub 'CreateDeviceStepFunction-${StackName}'
      DefinitionString: !Sub
        - |-
          {
            "StartAt": "createThing",
            "States": {
              "createThing": {
                "Type": "Task",
                "Resource": "${CreateThing}",
                "Retry": [
                  {
                    "ErrorEquals": [
                      "States.TaskFailed"
                    ],
                    "IntervalSeconds": 5,
                    "MaxAttempts": 2,
                    "BackoffRate": 2
                  }
                ],
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "Next": "sendFailure",
                    "ResultPath": null
                  }
                ],
                "Next": "createKeysAndCert"
              },
              "createKeysAndCert": {
                "Type": "Task",
                "Resource": "${CreateKeysAndCert}",
                "Retry": [
                  {
                    "ErrorEquals": [
                      "States.TaskFailed"
                    ],
                    "IntervalSeconds": 5,
                    "MaxAttempts": 2,
                    "BackoffRate": 2
                  }
                ],
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "Next": "cleanUpThing",
                    "ResultPath": null
                  }
                ],
                "Next": "attachPolicyToCert"
              },
              "attachPolicyToCert": {
                "Type": "Task",
                "Resource": "${AttachPolicyToCert}",
                "Retry": [
                  {
                    "ErrorEquals": [
                      "States.TaskFailed"
                    ],
                    "IntervalSeconds": 5,
                    "MaxAttempts": 2,
                    "BackoffRate": 2
                  }
                ],
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "Next": "disableCertificate",
                    "ResultPath": null
                  }
                ],
                "Next": "attachCertToThing"
              },
              "attachCertToThing": {
                "Type": "Task",
                "Resource": "${AttachCertToThing}",
                "Retry": [
                  {
                    "ErrorEquals": [
                      "States.TaskFailed"
                    ],
                    "IntervalSeconds": 5,
                    "MaxAttempts": 2,
                    "BackoffRate": 2
                  }
                ],
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "Next": "detachPolicyFromCert",
                    "ResultPath": null
                  }
                ],
                "Next": "updateThing"
              },
              "updateThing": {
                "Type": "Task",
                "Resource": "${UpdateThing}",
                "Retry": [
                  {
                    "ErrorEquals": [
                      "States.TaskFailed"
                    ],
                    "IntervalSeconds": 5,
                    "MaxAttempts": 2,
                    "BackoffRate": 2
                  }
                ],
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "Next": "detachCertFromThing",
                    "ResultPath": null
                  }
                ],
                "Next": "sendConfirmation"
              },
              "cleanUpThing": {
                "Type": "Task",
                "Resource": "${DeleteThing}",
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "Next": "notifyFailure",
                    "ResultPath": null
                  }
                ],
                "Next": "sendFailure"
              },
              "deleteCertificateFromIotCore": {
                "Type": "Task",
                "Resource": "${DeleteCert}",
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "Next": "notifyFailure",
                    "ResultPath": null
                  }
                ],
                "Next": "deleteCertificateFromS3"
              },
              "deleteCertificateFromS3": {
                "Type": "Task",
                "Resource": "${RemoveCert}",
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "Next": "notifyFailure",
                    "ResultPath": null
                  }
                ],
                "Next": "cleanUpThing"
              },
              "disableCertificate": {
                "Type": "Task",
                "Resource": "${DisableCert}",
                "Retry": [
                  {
                    "ErrorEquals": [
                      "States.TaskFailed"
                    ],
                    "IntervalSeconds": 5,
                    "MaxAttempts": 2,
                    "BackoffRate": 2
                  }
                ],
                "Next": "deleteCertificateFromIotCore"
              },
              "detachPolicyFromCert": {
                "Type": "Task",
                "Resource": "${DetachPolicyFromCert}",
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "Next": "notifyFailure",
                    "ResultPath": null
                  }
                ],
                "Next": "disableCertificate"
              },
              "detachCertFromThing": {
                "Type": "Task",
                "Resource": "${DetachCertFromThing}",
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "Next": "notifyFailure",
                    "ResultPath": null
                  }
                ],
                "Next": "detachPolicyFromCert"
              },
              "sendConfirmation": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sqs:sendMessage",
                "Parameters": {
                  "MessageBody.$": "$",
                  "QueueUrl": "${PostbackQueue}"
                },
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "Next": "detachCertFromThing",
                    "ResultPath": null
                  }
                ],
                "Retry": [
                  {
                    "ErrorEquals": [
                      "States.TaskFailed"
                    ],
                    "IntervalSeconds": 5,
                    "MaxAttempts": 2,
                    "BackoffRate": 2
                  }
                ],
                "End": true
              },
              "sendFailure": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sqs:sendMessage",
                "Parameters": {
                  "MessageBody": {
                    "error": "CREATE_THING_FAILED",
                    "iccid.$": "$.iccid",
                    "ipAddress.$": "$.ipAddress",
                    "executionId.$": "$$.Execution.Id"
                  },
                  "QueueUrl": "${PostbackQueue}"
                },
                "Next": "CreateThingFailed"
              },
              "notifyFailure": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sns:publish",
                "Parameters": {
                  "Message": {
                    "data.$": "$",
                    "executionId.$": "$$.Execution.Id"
                  },
                  "Subject": "CREATE_THING_FAILED",
                  "TopicArn": "${CreateThingFailedTopic}"
                },
                "ResultPath": null,
                "Next": "sendFailure"
              },
              "CreateThingFailed": {
                "Type": "Fail"
              }
            }
          }
        - PostbackQueue: !Ref PostbackRegistrationQueueUrl
          CreateThingFailedTopic: !Ref PostbackCreateSnsArn
          AttachCertToThing: !GetAtt
            - AttachCertToThingLambdaFunction
            - Arn
          AttachPolicyToCert: !GetAtt
            - AttachPolicyToCertLambdaFunction
            - Arn
          CreateKeysAndCert: !GetAtt
            - CreateKeysAndCertLambdaFunction
            - Arn
          CreateThing: !GetAtt
            - CreateThingLambdaFunction
            - Arn
          DeleteThing: !GetAtt
            - DeleteThingLambdaFunction
            - Arn
          DeleteCert: !GetAtt
            - DeleteCertLambdaFunction
            - Arn
          UpdateThing: !GetAtt
            - UpdateThingLambdaFunction
            - Arn
          RemoveCert: !GetAtt
            - RemoveCertLambdaFunction
            - Arn
          DisableCert: !GetAtt
            - DisableCertLambdaFunction
            - Arn
          DetachCertFromThing: !GetAtt
            - DetachCertFromThingLambdaFunction
            - Arn
          DetachPolicyFromCert: !GetAtt
            - DetachPolicyFromCertLambdaFunction
            - Arn
      RoleArn: !GetAtt
        - StateMachineExecutionIamRole
        - Arn
  RemoveDeviceStepFunction:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: !Sub 'RemoveDeviceStepFunction-${StackName}'
      DefinitionString: !Sub
        - |-
          {
              "Comment": "If the thing exists, delete it and any certificate and policy attached to it.",
              "StartAt": "describeThing",
              "States": {
                "describeThing": {
                  "Type": "Task",
                  "Resource": "${DescribeThing}",
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "States.TaskFailed"
                      ],
                      "IntervalSeconds": 5,
                      "MaxAttempts": 2,
                      "BackoffRate": 2
                    }
                  ],
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "Next": "notifyFailure",
                      "ResultPath": null
                    }
                  ],
                  "Next": "disableCertificate"
                },
                "disableCertificate": {
                  "Type": "Task",
                  "Resource": "${DisableCert}",
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "States.TaskFailed"
                      ],
                      "IntervalSeconds": 5,
                      "MaxAttempts": 2,
                      "BackoffRate": 2
                    }
                  ],
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "Next": "notifyFailure",
                      "ResultPath": null
                    }
                  ],
                  "Next": "detachPolicyFromCertificate"
                },
                "detachPolicyFromCertificate": {
                  "Type": "Task",
                  "Resource": "${DetachPolicyFromCert}",
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "States.TaskFailed"
                      ],
                      "IntervalSeconds": 5,
                      "MaxAttempts": 2,
                      "BackoffRate": 2
                    }
                  ],
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "Next": "notifyFailure",
                      "ResultPath": null
                    }
                  ],
                  "Next": "detachCertificateFromThing"
                },
                "detachCertificateFromThing": {
                  "Type": "Task",
                  "Resource": "${DetachCertFromThing}",
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "States.TaskFailed"
                      ],
                      "IntervalSeconds": 5,
                      "MaxAttempts": 2,
                      "BackoffRate": 2
                    }
                  ],
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "Next": "notifyFailure",
                      "ResultPath": null
                    }
                  ],
                  "Next": "deleteCertificateFromIotCore"
                },
                "deleteCertificateFromIotCore": {
                  "Type": "Task",
                  "Resource": "${DeleteCert}",
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "States.TaskFailed"
                      ],
                      "IntervalSeconds": 5,
                      "MaxAttempts": 2,
                      "BackoffRate": 2
                    }
                  ],
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "Next": "notifyFailure",
                      "ResultPath": null
                    }
                  ],
                  "Next": "deleteCertificateFromS3"
                },
                "deleteCertificateFromS3": {
                  "Type": "Task",
                  "Resource": "${RemoveCert}",
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "States.TaskFailed"
                      ],
                      "IntervalSeconds": 5,
                      "MaxAttempts": 2,
                      "BackoffRate": 2
                    }
                  ],
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "Next": "notifyFailure",
                      "ResultPath": null
                    }
                  ],
                  "Next": "deleteThing"
                },
                "deleteThing": {
                  "Type": "Task",
                  "Resource": "${DeleteThing}",
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "States.TaskFailed"
                      ],
                      "IntervalSeconds": 5,
                      "MaxAttempts": 2,
                      "BackoffRate": 2
                    }
                  ],
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "Next": "notifyFailure",
                      "ResultPath": null
                    }
                  ],
                  "Next": "sendConfirmation"
                },
                "sendFailure": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::sqs:sendMessage",
                  "Parameters": {
                    "MessageBody": {
                      "error": "DELETE_THING_FAILED",
                      "iccid.$": "$.iccid",
                      "ipAddress.$": "$.ipAddress",
                      "executionId.$": "$$.Execution.Id"
                    },
                    "QueueUrl": "${PostbackQueue}"
                  },
                  "Next": "DeleteThingFailed"
                },
                "sendConfirmation": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::sqs:sendMessage",
                  "Parameters": {
                    "MessageBody": {
                      "ipAddress.$": "$.ipAddress"
                    },
                    "QueueUrl": "${PostbackQueue}"
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "States.TaskFailed"
                      ],
                      "IntervalSeconds": 5,
                      "MaxAttempts": 2,
                      "BackoffRate": 2
                    }
                  ],
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "Next": "notifyFailure",
                      "ResultPath": null
                    }
                  ],
                  "End": true
                },
                "notifyFailure": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::sns:publish",
                  "Parameters": {
                    "Message": {
                      "data.$": "$",
                      "executionId.$": "$$.Execution.Id"
                    },
                    "Subject": "DELETE_THING_FAILED",
                    "TopicArn": "${DeleteThingFailedTopic}"
                  },
                  "ResultPath": null,
                  "Next": "sendFailure"
                },
                "DeleteThingFailed": {
                  "Type": "Fail"
                }
              }
            }
        - DescribeThing: !GetAtt
            - DescribeThingLambdaFunction
            - Arn
          DisableCert: !GetAtt
            - DisableCertLambdaFunction
            - Arn
          DetachPolicyFromCert: !GetAtt
            - DetachPolicyFromCertLambdaFunction
            - Arn
          DetachCertFromThing: !GetAtt
            - DetachCertFromThingLambdaFunction
            - Arn
          DeleteCert: !GetAtt
            - DeleteCertLambdaFunction
            - Arn
          RemoveCert: !GetAtt
            - RemoveCertLambdaFunction
            - Arn
          DeleteThing: !GetAtt
            - DeleteThingLambdaFunction
            - Arn
          PostbackQueue: !Ref PostbackDeregistrationQueueUrl
          DeleteThingFailedTopic: !Ref PostbackDeleteSnsArn
      RoleArn: !GetAtt
        - StateMachineExecutionIamRole
        - Arn
  #=======================================================
  #
  #                 API Gateways
  #
  #=======================================================
  NceSupportApiGatewayRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub '${StackName}-core-nce-support'
      EndpointConfiguration:
        Types:
          - EDGE
      Policy: ''
  #=======================================================
  #
  #                 Device Endpoint Lambdas
  #
  #=======================================================
  GetCertificateFromDeviceLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref CodeBucketS3
        S3Key: !Join
          - ''
          - - !Ref CodebaseVersion
            - /
            - !Ref Codebase
      FunctionName: !Sub '${StackName}-GetCertificateFromDevice'
      Handler: src/certificate_api/index.getCertificate
      MemorySize: 256
      Role: !GetAtt
        - LambdaExecutionIamRole
        - Arn
      Runtime: nodejs12.x
      Timeout: 6
      Environment:
        Variables:
          S3_BUCKET: !Ref CertBucketS3
      TracingConfig:
        Mode: Active
    DependsOn:
      - GetCertificateFromDeviceLogGroup
      - CodeDownloadService
  #=======================================================
  #
  #           Get Iot Core Endpoint Address Service
  #
  #=======================================================
  GetIotCoreEndpointService:
    Type: 'AWS::CloudFormation::CustomResource'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'GetIotCoreEndpointLambdaFunction.Arn'
  GetIotCoreEndpointLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref CodeBucketS3
        S3Key: !Join
          - ''
          - - !Ref CodebaseVersion
            - /
            - !Ref Codebase
      FunctionName: !Sub '${StackName}-GetIotCoreEndpoint'
      Handler: src/iot_core/get.handler
      MemorySize: 256
      Role: !GetAtt
        - LambdaExecutionIamRole
        - Arn
      Runtime: nodejs12.x
      Timeout: 6
      TracingConfig:
        Mode: Active
    DependsOn:
      - GetIotCoreEndpointLogGroup
      - CodeDownloadService
  #=======================================================
  #
  #                 MQTT Endpoint Lambdas
  #
  #=======================================================
  MqttToIoTCoreLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref CodeBucketS3
        S3Key: !Join
          - ''
          - - !Ref CodebaseVersion
            - /
            - !Ref Codebase
      FunctionName: !Sub '${StackName}-BridgeMqttToIoTCore'
      Handler: src/mqtt_api/index.mqttToIoTCore
      MemorySize: 256
      Role: !GetAtt
        - LambdaExecutionIamRole
        - Arn
      Runtime: nodejs12.x
      Timeout: 6
      Environment:
        Variables:
          iotCoreEndpointAddress: !GetAtt GetIotCoreEndpointService.iotCoreEndpointAddress
          awsAccountId: !Ref 'AWS::AccountId'
      TracingConfig:
        Mode: Active
    DependsOn:
      - BridgeMqttToIoTCoreLogGroup
      - CodeDownloadService
  #=======================================================
  #
  #                 API Gateways Resources
  #
  #=======================================================
  ApiGatewayResourceDevices:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt
        - NceSupportApiGatewayRestApi
        - RootResourceId
      PathPart: devices
      RestApiId: !Ref NceSupportApiGatewayRestApi
  ApiGatewayResourceDevicesCertificates:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref ApiGatewayResourceDevices
      PathPart: certificates
      RestApiId: !Ref NceSupportApiGatewayRestApi
  ApiGatewayResourceDevicesCertificatesKeyCertkeyVar:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref ApiGatewayResourceDevicesCertificates
      PathPart: '{certKey}'
      RestApiId: !Ref NceSupportApiGatewayRestApi
  ApiGatewayMethodDevicesCertificatesKeyCertkeyVarGet:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceDevicesCertificatesKeyCertkeyVar
      RestApiId: !Ref NceSupportApiGatewayRestApi
      ApiKeyRequired: true
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt
              - GetCertificateFromDeviceLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
  MqttToIoTCoreLambdaPermissionApiGateway:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt
        - MqttToIoTCoreLambdaFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref NceSupportApiGatewayRestApi
          - /*/*
  GetCertificateFromDeviceLambdaPermissionApiGateway:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt
        - GetCertificateFromDeviceLambdaFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref NceSupportApiGatewayRestApi
          - /*/*

  ApiGatewayResourceMqtt:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt
        - NceSupportApiGatewayRestApi
        - RootResourceId
      PathPart: mqtt
      RestApiId: !Ref NceSupportApiGatewayRestApi
  ApiGatewayMethodMqttPost:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceMqtt
      RestApiId: !Ref NceSupportApiGatewayRestApi
      ApiKeyRequired: true
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        # Building custom ARN path to not depend on MqttToIoTCoreLambdaFunction and to avoid circular dependencies
        Uri: !Join
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - 'arn:aws:lambda:'
            - !Ref 'AWS::Region'
            - ':'
            - !Ref 'AWS::AccountId'
            - ':function:'
            - !Sub '${StackName}-BridgeMqttToIoTCore'
            - /invocations
      MethodResponses: []

  NceSupportApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - ApiGatewayMethodDevicesCertificatesKeyCertkeyVarGet
      - ApiGatewayMethodMqttPost
    Properties:
      RestApiId: !Ref NceSupportApiGatewayRestApi
      StageName: !Ref StackName
  #=======================================================
  #
  #                 API Key
  #
  #=======================================================
  ApiKey:
    Type: 'AWS::ApiGateway::ApiKey'
    DependsOn:
      - ApiGatewayMethodDevicesCertificatesKeyCertkeyVarGet
      - NceSupportApiGatewayDeployment
    Properties:
      Name: !Sub '${StackName}-core-bss-support-api-key'
      Description: CloudFormation API Key V1
      Enabled: true
      StageKeys:
        - RestApiId: !Ref NceSupportApiGatewayRestApi
          StageName: !Ref StackName
  UsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    DependsOn:
      - ApiGatewayMethodDevicesCertificatesKeyCertkeyVarGet
      - NceSupportApiGatewayDeployment
    Properties:
      ApiStages:
        - ApiId: !Ref NceSupportApiGatewayRestApi
          Stage: !Ref StackName
      Description: API Usage Plan
      UsagePlanName: !Sub '${StackName}-core-bss-support-usage-plan'
  UsagePlanApiKey:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  #=======================================================
  #
  #                 IoT Core Policy
  #
  #=======================================================
  ThingPolicy:
    Type: 'AWS::IoT::Policy'
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      PolicyName: !Join
        - '-'
        - - 1nceThingPolicy
          - !Ref CodebaseVersion
          - !Ref StackName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'iot:Connect'
            Resource:
              - !Join
                - ''
                - - 'arn:aws:iot:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':client/${iot:Connection.Thing.ThingName}'
          - Effect: Allow
            Action:
              - 'iot:Publish'
              - 'iot:Receive'
            Resource:
              - !Join
                - ''
                - - 'arn:aws:iot:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':topic/${iot:Connection.Thing.ThingName}/*'
          - Effect: Allow
            Action:
              - 'iot:Subscribe'
            Resource:
              - !Join
                - ''
                - - 'arn:aws:iot:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':topicfilter/${iot:Connection.Thing.ThingName}/*'
          - Effect: Allow
            Action:
              - 'iot:Receive'
            Resource:
              - !Join
                - ''
                - - 'arn:aws:iot:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':topic/${iot:Connection.Thing.ThingName}/*'
  #=======================================================
  #
  #                 CloudFormation Outputs
  #
  #=======================================================
Outputs:
  CreateQueueSQSUrl:
    Description: URL of new Amazon SQS CreateQueueSQS
    Value: !Ref CreateQueueSQS
  DeleteQueueSQSUrl:
    Description: URL of new Amazon SQS DeleteQueueSQS
    Value: !Ref DeleteQueueSQS
  CreateQueueSQSArn:
    Description: URL of new Amazon SQS CreateQueueSQS
    Value: !GetAtt
      - CreateQueueSQS
      - Arn
  DeleteQueueSQSArn:
    Description: URL of new Amazon SQS DeleteQueueSQS
    Value: !GetAtt
      - DeleteQueueSQS
      - Arn
  AccountID:
    Description: Users AccountID
    Value: !Sub '${AWS::AccountId}'
  LambdaExecutionIamRole:
    Description: Lambda Execution IAM Role ARN
    Value: !GetAtt
      - LambdaExecutionIamRole
      - Arn
  StateMachineExecutionIamRole:
    Description: State Machine Execution IAM Role ARN
    Value: !GetAtt
      - StateMachineExecutionIamRole
      - Arn
  ApiKeyId:
    Description: API key ID
    Value: !Ref ApiKey
  CertificatesUrl:
    Description: URL for getting IoT Thing Certificates
    Value: !Join
      - ''
      - - 'https://'
        - !Ref NceSupportApiGatewayRestApi
        - .execute-api.
        - !Ref 'AWS::Region'
        - .amazonaws.com/
        - !Ref StackName
        - /devices/certificates
  MqttBridgeUrl:
    Description: MQTT Bridge URL
    Value: !Join
      - ''
      - - 'https://'
        - !Ref NceSupportApiGatewayRestApi
        - .execute-api.
        - !Ref 'AWS::Region'
        - .amazonaws.com/
        - !Ref StackName
        - /mqtt
  1nceCrossAccountIamRoleArn:
    Description: ARN of the cross-account IAM role used by 1nce to gain access to specific services
    Value: !GetAtt
      - 1nceCrossAccountIamRole
      - Arn
