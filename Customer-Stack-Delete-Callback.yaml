Parameters:
  #=======================================================
  #
  #                   CloudFormation Parameters
  #
  #=======================================================
  StackName:
    Type: String
    Default: ''
    Description: Unique identifier of the resources in this stack
  IdentifierToken:
    Type: String
    Default: ''
    Description: Unique identifier used for performing the 1nce Provision Callback.
  Codebase:
    Type: String
    Default: customer_stack.zip
    AllowedValues:
      - customer_stack.zip
    NoEcho: true
    Description: >-
      Zip file which contains the codebase needed for the deployment of the
      stack
  CodebaseBucket:
    Type: String
    Default: ''
    Description: Code base bucket name
  CodebaseVersion:
    Type: String
    Default: ''
    Description: Version of the CloudFormation Stack
  OverrideCallBackUrl:
    Type: String
    Default: ''
    Description: Parameter to override the Callback URL
  CallbackUrl:
    Type: String
    Default: ''
    Description: Callback URL

Resources:
  #=======================================================
  #
  #                     Log groups
  #
  #=======================================================
  DeleteCallbackLambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${StackName}-Delete-CallbackLambda'
  DeleteCallbackDownloadCodeLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${StackName}-CallbackDownloadCodeLambda'
  #=======================================================
  #
  #                     S3 Buckets
  #
  #=======================================================
  DeleteCallbackCodeBucketS3:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  #=======================================================
  #
  #                     Lambda IAM Role
  #
  #=======================================================
  DeleteCallbackLambdaExecutionIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Join
            - '-'
            - - iot-core
              - lambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*
              - Effect: Allow
                Action:
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*:*
              - Effect: Allow
                Action:
                  - 'xray:PutTraceSegments'
                  - 'xray:PutTelemetryRecords'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'apigateway:GET'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:DeleteObject'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:PutObject'
                  - 's3:GetBucketPolicy'
                  - 'S3:PutObjectTagging'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref DeleteCallbackCodeBucketS3
                      - /*
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref DeleteCallbackCodeBucketS3
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 'S3:GetObjectTagging'
                  - 's3:ListBucket'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref CodebaseBucket
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref CodebaseBucket
                      - /
                      - !Ref CodebaseVersion
                      - /*
      Path: /
  #=======================================================
  #
  #                     Lambda Functions
  #
  #=======================================================
  DeleteCallbackDownloadCodeLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': o
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s'%dest_bucket)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=o)
          def delete_objects(bucket, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
      FunctionName: !Sub '${StackName}-DeleteCallbackDownloadCodeService'
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt
        - DeleteCallbackLambdaExecutionIamRole
        - Arn
      Runtime: python2.7
      Timeout: 240
      TracingConfig:
        Mode: Active
    DependsOn:
      - DeleteCallbackDownloadCodeLogGroup
  DeleteCallBackLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref DeleteCallbackCodeBucketS3
        S3Key: !Join
          - ''
          - - !Ref CodebaseVersion
            - /
            - !Ref Codebase
      FunctionName: !Sub '${StackName}-DeleteNotificationCallback'
      Handler: src/callback/delete.callback
      MemorySize: 256
      Role: !GetAtt
        - DeleteCallbackLambdaExecutionIamRole
        - Arn
      Runtime: nodejs12.x
      Timeout: 6
      TracingConfig:
        Mode: Active
    DependsOn:
      - DeleteCallbackLambdaLogGroup
      - DeleteCallbackCodeDownloadService
  #=======================================================
  #
  #                     Custom Services
  #
  #=======================================================
  DeleteCallbackCodeDownloadService:
    Type: 'AWS::CloudFormation::CustomResource'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'DeleteCallbackDownloadCodeLambdaFunction.Arn'
      DestBucket: !Ref 'DeleteCallbackCodeBucketS3'
      SourceBucket: !Ref CodebaseBucket
      Objects:
        - !Join
          - ''
          - - !Ref CodebaseVersion
            - /
            - !Ref Codebase
  NotificationService:
    Type: 'AWS::CloudFormation::CustomResource'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt
        - DeleteCallBackLambdaFunction
        - Arn
      IdentifierToken: !Ref IdentifierToken
      CallbackUrl: !Ref CallbackUrl
      OverrideCallBackUrl: !Ref OverrideCallBackUrl
      AWS:
        AccountId: !Ref 'AWS::AccountId'
        Region: !Ref 'AWS::Region'
      StackName: !Ref StackName
      CloudFormationVersion: !Ref CodebaseVersion
